#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/vaddr.h"

static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  printf ("system call!\n");
	char * sp  = (char *) (f->esp);
	if(sp!=NULL && is_user_vaddr(sp))
		{
			int syscall_number = sp[0]|sp[1]<<8|sp[2]<<16|sp[3]<<24;
			switch syscall_number
				{
					case SYS_HALT:                   /* Halt the operating system. */
					case SYS_EXIT:                   /* Terminate this process. */
					case SYS_EXEC:                   /* Start another process. */
					case SYS_WAIT:                   /* Wait for a child process to die. */
					case SYS_CREATE:                 /* Create a file. */
					case SYS_REMOVE:                 /* Delete a file. */
					case SYS_OPEN:                  /* Open a file. */
					case SYS_FILESIZE:             /* Obtain a file's size. */
					case SYS_READ:                   /* Read from a file. */
					case SYS_WRITE:                 /* Write to a file. */
					case SYS_SEEK:                   /* Change position in a file. */
					case SYS_TELL:                   /* Report current position in a file. */
					case SYS_CLOSE:                  /* Close a file. */
				}
		}
	//hex_dump(sp, sp, 0xc0000000-(int)sp, true);
	
	
  thread_exit ();
}
